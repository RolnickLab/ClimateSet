# Adapted from https://github.com/RolnickLab/climart

# specify here default training configuration
defaults:
  - _self_
  - trainer: debug.yaml
  - model: unet.yaml
  - datamodule: climate.yaml
  - decoder: null
  - callbacks: default.yaml  # or use wandb.yaml for wandb suppport
  - logger: wandb # set logger here or use command line (e.g. `python run.py logger=wandb`)

  # modes are special collections of config options for different purposes, e.g. debugging
  - mode: default.yaml

  # experiment configs allow for version control of specific configurations
  # for example, use them to store best hyperparameters for each combination of model and datamodule
  - experiment: null

  # config for hyperparameter optimization
  - hparams_search: null

  # optional local config for machine/user specific settings
  - optional local: default.yaml

  # enable color logging
  #- override hydra/hydra_logging: colorlog
  # - override hydra/job_logging: colorlog
  # default optimizer is Adam
  #- override optimizer@model.optimizer: adam.yaml


model:
  loss_function: "climax_lon_lat_rmse"
  monitor: "val/llrmse_climax"
  super_emulation: False
  super_decoder: False

datamodule:
  batch_size: 4
  shuffle: False
  # If you would like to track emissions using codecarbon
  emissions_tracker: True 
   
work_dir: ${hydra:runtime.cwd}  # {oc.env:ENV_VAR} allows to get environment variable ENV_VAR

# path to checkpoints
ckpt_dir: ${work_dir}/checkpoints/

# path for logging
log_dir: ${work_dir}/logs/

# pretty print config at the start of the run using Rich library
print_config: True

# If you would like to profile with pytorch profiler
pyprofile: False



# disable python warnings if they annoy you
ignore_warnings: True

# evaluate on test set, using best model weights achieved during training
# lightning chooses best weights based on metric specified in checkpoint callback
test_after_training: True

# Upload config file to wandb cloud?
save_config_to_wandb: True

# Verbose?
verbose: True

# seed for random number generators in pytorch, numpy and python.random
seed: 42

# name of the run, should be used along with experiment mode
name: "default"


# TODO make a yaml file for normalization
# normalizer:
#   _target_: climart.data_transform.normalization.Normalizer
#   input_normalization: "z"
#   output_normalization: "z"
#   spatial_normalization_in:  False
#   spatial_normalization_out: False
#   log_scaling: False
#   data_dir: ${datamodule.data_dir}
#   verbose: ${verbose}
# path to original working directory
# hydra hijacks working directory by changing it to the new log directory
# so it's useful to have this path as a special variable
# https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory

